version: '3.6'
services:
  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - mynetwork
  kafka:
    image: wurstmeister/kafka:2.11-1.1.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_CREATE_TOPICS: logs:1:1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - 9092:9092
    # healthcheck:
    #   test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
    #   interval: 5s
    #   timeout: 10s
    #   retries: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mynetwork

  mysql:
    container_name: mysql
    restart: always
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: logs
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    # healthcheck:
    #   test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "user", "--password=password"]
    #   interval: 5s
    #   timeout: 10s
    #   retries: 5
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork

  producer:
    container_name: producer
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka
      # kafka:
      #   condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: logs
    ports:
      - "3000:3000"
    networks:
      - mynetwork
  
  consumer:
    container_name: consumer
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      - kafka
      - mysql
      # kafka:
      #   condition: service_healthy
      # mysql:
      #   condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: logs
    networks:
      - mynetwork

  search:
    container_name: search
    build:
      context: .
      dockerfile: Dockerfile.search
    depends_on:
      - mysql
      # mysql:
      #   condition: service_healthy
    ports:
      - "4000:4000"
    environment:
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: logs
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

